# -*- coding: utf-8 -*-
"""Car_Resale_value.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uwyL56G4rSJ2QEuuVQ6hi5KJLA5xIhy6
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_excel('/Users/arthu/Desktop/Ibm/data.xlsx')

df.head()

df.isnull().sum()

df = df.dropna()

df.isnull().sum()

from sklearn.preprocessing import LabelEncoder

lef=LabelEncoder()
les=LabelEncoder()
let=LabelEncoder()

df['FuelType']=lef.fit_transform(df.Fuel_type)

df['SellerType']=les.fit_transform(df.Seller_Type)
df['Transmissions']=let.fit_transform(df.Transmission)

df.head(2)

df.drop(['name','Fuel_type','Seller_Type','Transmission'],axis=1,inplace=True)

df.head()

df[['Selling_Price','Kms_driven','engine']].mean()

df[['owner','year','FuelType','SellerType','Transmissions']].mean()

df.describe()

df.head(2)

sns.histplot(df.Selling_Price)

sns.kdeplot(df.Kms_driven,shade=True)

sns.histplot(df.engine)

plt.figure(figsize=(7,5))
df.year.value_counts().plot(kind='barh')

plt.figure(figsize=(7,5))
df.owner.value_counts().plot(kind='barh')

plt.figure(figsize=(7,5))
df.gas_type.value_counts().plot(kind='barh')

plt.figure(figsize=(7,5))
df.FuelType.value_counts().plot(kind='barh')

plt.figure(figsize=(7,5))
df.SellerType.value_counts().plot(kind='barh')

plt.figure(figsize=(7,5))
df.Transmissions.value_counts().plot(kind='barh')

df.shape

sns.heatmap(df.corr(),annot=True)

sns.pairplot(df)

x=df.drop('Selling_Price',axis=1)
y=df.Selling_Price

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

x_train.shape, y_train.shape

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor()

rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

from sklearn.metrics import r2_score,mean_absolute_error, mean_squared_error

r2_score(y_test,y_pred)

mean_squared_error(y_test,y_pred)

mean_absolute_error(y_test,y_pred)

x

rf.predict([[2014,145500,1,1248.0,1,1,1]])

import pickle

pickle.dump(rf,open('model.pkl','wb'))